#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from subprocess import run
import logger_wrapper


def _load_configs():
    import os
    filename = os.path.join(os.environ['HOME'], '.config', 'oc', 'config.yml')

    with open(filename) as file:
        import yaml
        return yaml.safe_load(file)


def parse_command_line():
    '''
    Reference: https://docs.python.org/3/library/argparse.html
    '''
    from argparse import ArgumentParser

    parser = ArgumentParser(description='Openshift login script')

    configs = _load_configs()

    parser.add_argument(
            '--host',
            '-ho',
            default=configs['host'],
            help='Openshift host to connect to')

    parser.add_argument(
            '--port',
            '-p',
            default=configs['port'],
            help='Host port')

    parser.add_argument(
            '--username',
            '-u',
            default=configs['username'],
            help='Openshift username')

    parser.add_argument(
            '--password',
            '-pwd',
            default=configs['password'],
            help='Openshift password')

    parser.add_argument(
            '--echo',
            action='store_true',
            help='Just echo the command to be executed')

    logger_wrapper.make_verbosity_argument(parser)

    return parser.parse_args()


def error(message, status=1):
    print(message)
    exit(1)


def main():
    import shutil
    if not shutil.which('oc'):
        error('"oc" command not found, exiting...')

    global args

    args = parse_command_line()

    logger_wrapper.configure(args.verbosity)
    global logger
    logger = logger_wrapper.get(__name__)

    command = 'oc login' \
        f' --server=https://{args.host}:{args.port}' \
        ' --insecure-skip-tls-verify' \
        f' --username {args.username}' \
        f' --password {args.password}'.split(' ')

    logger.info(f'Running "{command}"')

    if args.echo:
        print(' '.join(command))
    else:
        run(command)

    return 0


if __name__ == '__main__':
    returncode = main() or 0

    exit(returncode)
