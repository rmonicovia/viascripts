#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from viacommons import _load_configs


def parse_command_line():
    '''
    Reference: https://docs.python.org/3/library/argparse.html
    '''
    from argparse import ArgumentParser, FileType

    parser = ArgumentParser(description='Add sku\'s to resync')

    parser.add_argument('strategy',
                        choices=[ 'condicoesPagamento', 'estoqueProdutoPendente', 'opcoesConjunto', 'opcoesMercadoria', 'precificacaoCelularesPrecoVigenciaFuturaDir1CB', 'precificacaoCelularesPrecoVigenciaFuturaDir1PF', 'precificacaoCelularesPrecoVigenciaFuturaDir2CB', 'precificacaoCelularesPrecoVigenciaFuturaDir2PF', 'precificacaoCelularesPrecoVigenciaFuturaDir3CB', 'precificacaoCelularesPrecoVigenciaFuturaDir3PF', 'precificacaoCelularesPrecoVigenciaFuturaDir4CB', 'precificacaoCelularesPrecoVigenciaFuturaDir4PF', 'precificacaoCelularesPrecoVigenciaFuturaDir5CB', 'precificacaoCelularesPrecoVigenciaFuturaDir5PF', 'precificacaoConjunto', 'precificacaoConjuntoCelularesCPPrecoVigenciaFutura', 'precificacaoConjuntoCPPrecoVigenciaFutura', 'precificacaoConjuntoPrecoVigenciaFutura', 'precificacaoControleFinalVigencia', 'precificacaoControleFinalVigenciaCelularesCP', 'precificacaoControleFinalVigenciaCelularesDir1CB', 'precificacaoControleFinalVigenciaCelularesDir1PF', 'precificacaoControleFinalVigenciaCelularesDir2CB', 'precificacaoControleFinalVigenciaCelularesDir2PF', 'precificacaoControleFinalVigenciaCelularesDir3CB', 'precificacaoControleFinalVigenciaCelularesDir3PF', 'precificacaoControleFinalVigenciaCelularesDir4CB', 'precificacaoControleFinalVigenciaCelularesDir4PF', 'precificacaoControleFinalVigenciaCelularesDir5CB', 'precificacaoControleFinalVigenciaCelularesDir5PF', 'precificacaoControleFinalVigenciaCP', 'precificacaoMercadoriaChip', 'precificacaoMercadoriaChipCPPrecoVigenciaFutura', 'precificacaoMercadoriaCPPrecoVigenciaFutura', 'salvarConjunto', 'salvarMercadoria', 'sincronizarComissao', 'verificarComissao', 'verificarCondicoesPagamento', 'verificarPrecificacao', 'verificarPrecificacaoCelularesDir1CB', 'verificarPrecificacaoCelularesDir1PF', 'verificarPrecificacaoCelularesDir2CB', 'verificarPrecificacaoCelularesDir2PF', 'verificarPrecificacaoCelularesDir3CB', 'verificarPrecificacaoCelularesDir3PF', 'verificarPrecificacaoCelularesDir4CB', 'verificarPrecificacaoCelularesDir4PF', 'verificarPrecificacaoCelularesDir5CB', 'verificarPrecificacaoCelularesDir5PF' ],
                        help='Strategy name to resync')

    parser.add_argument('skus',
                        help='SKUs to retry sync on')


    subparsers = parser.add_subparsers()

    return parser.parse_args()


configs = _load_configs()


def main():
    print('TODO')
    import sys
    sys.exit(0)

    global args

    args = parse_command_line()

    try:
        import pymongo
    except ImportError:
        error('Module "pymongo" is required')

    user, password, host, params = configs['mongo'].values()

    user = urllib.parse.quote_plus(user)
    password = urllib.parse.quote_plus(password)

    connection_string = f'mongodb://{user}:{password}@{host}/{params}'

    try:
        client = pymongo.MongoClient(connection_string)
        catalogo = client.catalogo

        produtos = catalogo.produtos

        produtos.update({ '_id': mongo_id}, {'$set': post}, upsert=False)
    finally:
        client.close()

    return 0


if __name__ == '__main__':
    returncode = main() or 0

    exit(returncode)
