#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from sys import exit
from argparse import ArgumentParser, ArgumentError


def numbers_only(s: str) -> bool:
    from re import match

    return match('[0-9]+', s) is not None


def str_list(raw: str) -> list:
    raw_list = raw.split(',')

    for item in raw_list:
        if not numbers_only(item):
            return None

    return raw_list


def sku_list(raw: str) -> str:
    if not (result := str_list(raw)):
        raise ArgumentError('Invalid SKU list format, it must be a comma separated list where each item must contain numbers only')

    return result


# Milestone 2
# def filial_list(raw: str) -> list:
#     if not (result := str_list(raw)):
#         raise ArgumentError('Invalid filial list format, it must be a comma separated list where each item must contain numbers only')
# 
#     return result


def parse_command_line():
    parser = ArgumentParser(
        description='Return the status for one or more skus')

    parser.add_argument('skus',
                        type=sku_list,
                        help='SKU number, must contain only numbers')

    # milestone 4
    # parser.add_argument('--environment',
    #                     '-e',
    #                     choices=['sit', 'hlg', 'stg', 'prd'],
    #                     default='prd',
    #                     help='Filial number list, comma separated')

    # Milestone 2
    # parser.add_argument('--filiais',
    #                     '-f',
    #                     type=filial_list,
    #                     help='Filial number list, comma separated')

    return parser.parse_args()


def error(message, exit_code=1):
    global logger

    logger.critical(message)

    exit(exit_code)


class Analysis(object):
    
    def __init__(self, skus):
        self._results = {}
        self.skus = skus

        for sku in skus:
            self._results[sku] = { 'mongo': False }


    def on_mongo(self, sku, value = None):
        if value:
            self._results[sku]['mongo'] = value
        else:
            return self._results[sku]['mongo']


def main():
    global args

    args = parse_command_line()

    analysis = Analysis(args.skus)

    # breakpoint()
    try:
        import pymongo
    except ImportError:
        error('Module "pymongo" is required')

    import urllib

    username = urllib.parse.quote_plus('svc_viamais')
    password = urllib.parse.quote_plus('Ygy89xd*<jpVc53TXc845Ka')

    # connection_string = f'mongodb://{username}:{password}@10.128.18.110:27017,10.128.18.111:27017,10.128.18.112:27017,10.128.18.113:27017,10.128.18.40:27017'

    # connection_string = f'mongodb://{username}:{password}@mdbp1-via-1.dc.nova:27017,mdbp2-via-1.dc.nova:27017,mdbp3-via-1.dc.nova:27017,mdbp4-via-1.dc.nova:27017,mdbp5-via-1.dc.nova:27017'
    connection_string = f'mongodb://{username}:{password}@mdbp1-via-1.dc.nova:27017/?authSource=admin&authMechanism=SCRAM-SHA-1'

    client = pymongo.MongoClient(connection_string)
    
    try:
        database = client.catalogo

        collection = database.produtos

        produtos = collection.find({ "_id.sku": { "$in": args.skus } })

        try:
            for produto in produtos:
                analysis.on_mongo(produto.sku, True)
        finally:
            produtos.close()

    finally:
        client.close()


    for sku in analysis.skus:
        print(sku + ':')
        print(f'    Mongo: { "yes" if analysis.on_mongo(sku) else "no" }')

    return 0


if __name__ == '__main__':
    returncode = main() or 0

    exit(returncode)
