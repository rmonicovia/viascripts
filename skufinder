#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from argparse import ArgumentParser, ArgumentError
from db2datasource import DB2DataSource
from value_formatters import BooleanFormatter
from mongodatasource import MongoDataSource
from skudatasource import SKUDataSource
from solrdatasource import SolrDataSource
from table import Table, DefaultTableFormatter
from viacommons import _load_configs
from sys import exit


def numbers_only(s: str) -> bool:
    from re import match

    return match('[0-9]+', s) is not None


def str_list(raw: str) -> list:
    raw_list = raw.split(',')

    for item in raw_list:
        if not numbers_only(item):
            return None

    return raw_list


def sku_list(raw: str) -> str:
    if not (result := str_list(raw)):
        raise ArgumentError('Invalid SKU list format, it must be a comma separated list where each item must contain numbers only')

    return sorted(result)


def parse_command_line():
    parser = ArgumentParser(
        description='Return the status for one or more skus')

    parser.add_argument('skus',
                        type=sku_list,
                        help='SKU number, must contain only numbers')

    return parser.parse_args()


# find skus informados na linha de comando
# find skus em arquivo
# find skus com dt_mod agora - x tempo informado na linha de comando
# daemon que fica fazendo select na mcr com dt_mod agora - tempo da sync terminar o serviço dela
# O daemon também pode levar em conta o tempo do pod mais antigo no OC

def main():
    args = parse_command_line()

    # args.skus = list()
    # with open('/home/rmonico/skus2') as source:
    #     for sku in source.readlines():
    #         args.skus.append(sku.strip())


    sku_data_source = SKUDataSource(args.skus)

    configs = _load_configs()

    db2_data_source = DB2DataSource(configs['DB2'], args.skus)
    mongo_data_source = MongoDataSource(configs['mongo'], args.skus)
    solr_data_source = SolrDataSource(configs['solr'], args.skus)

    booleanformatter = BooleanFormatter().format

    table = Table()

    table.column(header='SKU', provider=sku_data_source.sku, width=10, alignment='left', formatter=str)
    table.column(header='DB2 MCR', provider=db2_data_source.mcr, width=9, alignment='center', formatter=booleanformatter)
    table.column(header='DB2 AGP_MCR_ANC', provider=db2_data_source.agp_mcr_anc, width=17, alignment='center', formatter=booleanformatter)
    table.column(header='Mongo produtos', provider=mongo_data_source.produtos, width=16, alignment='center', formatter=booleanformatter)

    table.column(header='Solr Catalogo', provider=solr_data_source.solr, width=15, alignment='center', formatter=booleanformatter)

    table.print(DefaultTableFormatter())
    
    return 0


if __name__ == '__main__':
    returncode = main() or 0

    exit(returncode)

